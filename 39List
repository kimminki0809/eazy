using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class Player{

   
    }

class MyList<T>{

    int[] Arr = new int[0];

    int Capa;
    int Count;

    public void Add(T _Add){

        if (Count + 1 >= Capa){

            //확장 함수


        }
    }
}





namespace _39List{

    class Program{

        static void Main(String[] args){

            List<int> NewList = new List<int>();
            //List라는 제네릭 함수를 만들기 위해
            //List 라는 클래스를 만들지 않았음에도 불구하고 만들 수 있음
            //내가 관리해달라고 요청하는게 매번 바뀌므로 제네릭 클래스이어여 한다.

            
            

            //자료: 넣어준 int
            
            for (int i = 0; i < 10; i++){

                Console.WriteLine((NewList.Count + 1).ToString() + "Add");
                Console.WriteLine("Capacity :" + NewList.Capacity.ToString()); //배열의 크기
                //Capacity는 프로퍼티 문법.

                Console.WriteLine("Count :" + NewList.Count); //자료의 크기 
                NewList.Add(i); //맨 앞에 100이 들어감



            }


            //내부에 자료가 있는지 없는지 알려줌
            //탐색에는 유리하지 않음

            if (NewList.Contains(8)) //8이 있다면 true를 리턴해줌
            {
                Console.WriteLine("내부에 8이 있습니다");

            }
            
            Console.WriteLine(NewList[5]);//클래스가 들어감 : 인덱서 = 연산자 겹지정 5가 출력되게 해줌
            Console.WriteLine(NewList[9999]);//클래스가 들어감 : 인덱서 = 연산자 겹지정 Out Of Range 범위를 벗어남
            Console.WriteLine(NewList[16]);//클래스가 들어감 : 인덱서 = 연산자 겹지정 배열의 크기는 중요하지 않음: 자료의 개수로 판단해야함

            
            //클래스로 만들어주는 좀 편리한 배열같은 느낌


            NewList.Remove(10); //10이 있다면 지운다
            NewList.RemoveAll(); // 다른 리스트 혹은 배열을 넣어줬을때 중복되는걸 지운다
            NewList.RemoveAt(1); // 첫 번째를 지운다
            NewList.RemoveRange(0, 4); // 0부터 4개 지워라

            //배열에서는 중간에 있는 애를 빼서 지우는게 불가능 
            //list는 가능해서 편리ㄴ




            MyList<int> NewInt = new MyList<int>();

            NewInt.Add(100);

            


        }
    }



}

