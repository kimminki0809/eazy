using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//07 접근제한지정자
class Player{//클래스의 내부
    public int ATT = 10;
    public int HP = 100;
    public int Lv = 1;





    //리턴값



    //리턴값은 객체가 자신의 상태를 외부에 알려주는 용도로 사용한다.
    //외부에 알려주는 순간 함수가 종료됨.
    //return 문장은 사용하면 수 많은 코드가 return 문장 아래에 있어도 함수가 종료된다.
    public void GetLv(){//플레이어의 레벨 알아보기 함수

    return Lv;
    Lv = 10000; // 이 코드는 return문장 아래에 있어서 무시되고 있다.

    }



    public void LvUp(){
        AT += 30
        HP += 300
    }

    public void SetHP(int _HP){
        HP = _HP    
    }




    public void Fight(){
        Colsole.WriteLine("주먹질");
    }
}//플레이어의 내용을 가진 것.
//플레이어가 객체로 존재하지 않음 > 객체화를 해주어야함.






//함수는 선언, 내용으로 나뉜다
//void는 리턴값
//Damage는 이름, 식별자
//(int _Dmg)는 인자값






//인자값




//함수는 보통 클래스 외부 와의 소통을 위해서 만든다
//인자값 (int _Dmg)를 넣는다는 것은 외부에서 하나의 int 값을 넣어 플레이어에게 전달해 주겠다. 라는 뜻
public void Damage1(int _Dmg){
HP = HP - Dmg

}

//인자값엔 2개가 들어갈 수도, 그 이상이 들어갈 수도 있다.
public void Damage2(int _Dmg, int _SubDmg){
HP = HP - Dmg
HP = HP - SubDmg

}



//인자값과 리턴값은 동시에 사용될 수 있다.
//리턴값은 자신이 리턴해주려는 자료형과   동일한 자료형 이어야 한다. void > int
public int DamageToHPReturn(int _Dmg){

HP = HP - Dmg
return HP;// 리턴함수가 있으므로 int함수를 작성해줌

}









class Program{//클래스
    static void Main(String[] args){//시작용 함수
    


    Player NewPlayer = new Player();//객체화
    

//접근제한지정자를 Public으로 설정했기에 타 클래스에서 사용이 가능
    NewPlayer.LvUp();
    NewPlayer.Fight();


    //외부의 값을 받아 객체가 내부의 상태를 변화시킬 목적으로 함수를 선언하는 경우가 많다.
    NewPlayer.Damage1(10);
    NewPlayer.Damage1(20);
    NewPlayer.Damage2(10, 20);
    

    Console.WriteLine(NewPlayer.GetLv());
    }
}
//맴버변수가 변화하는 순간
