using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class Player{
}

    class Program{

        class item{

            public string Name;
            public int AT;
            public int DF;

        }

        static void Main(String[] args){

            //배열은 기본적으로 자료형이라고 할 수 있으며
            //기본 자료형에 속한다.
            //선언 방식: 어떤 자료형[]

            //모든 자료형은 구조체 아니면 클래스에 가까움
            //기본 자료형도 마찬가지임

            //Arrint은 int의 배열형
            //Arrint[0]은 무슨 자료형인가? > int형

            //C#에서는 모든 자료형은 클래스 혹은 구조체에 가깝다
            //> 맴버변수와 맴버 함수가 있다
            

            //여러 개가 모여있는 것.
            //연속되어 있다.
            //접근방법: 모여있는 자료들에 접근하는 방법







            int[] Arrint = new int[10]; //10개에 전부 0이 들어가게됨 
            //int 형식인 기본값인 0으로 초기화된다.

            int Value = Arrint[0];//Arrint의 배열의 첫번째 요소에 접근해 값을 가져와 value에 할당한다.


            for (int i = 0; i < Arrint.length; i++) //length > property
        
            {
                Console.WriteLine(Arrint[i]);
            }

        
            //클래스 또한 자료형이다 (사용자 정의 자료형)


            
            
            
            Item[] ArrItem = new Item[10]; //이것은 아이템을 만든 것이 아니다. 아이템을 담을 수 있는 공간이 10개 생긴 것이다.
            //아이템이란 참조형을 담을 수 있는 공간이 10개 생겼다.
            // = 아이템이란 메모리를 가리킬 수 있는 참조형이 10개 생겼다.

            Item NewItem = new Item(); //이것이 아이템을 만든 것이다.
            Item NewItem2 = NewItem; //NewItem2도 new Item을 가리킨다.(참조형이 하나 더 생겼다)


           

            for (int i = 0; i < ArrItem.length; i++)
            {
                ArrItem[i] = new item(); //각각에 만들어진 아이템이 새로 만든 아이템들을 가리킨다.   
            }   

            ArrItem[0].Name = "두부"
            ArrItem[1].Name = "노엉이"
            ArrItem[2].Name = "피아제"

            for (int i = 0; i < ArrItem.length; i++)
            {
                Console.WriteLine(ArrItem[i].Name);
            
            }



            


        }
    }





