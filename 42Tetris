using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


enum TBLOCK{

    WALL,
    VOID,
    BLOCK,

}



enum BLOCKTYPE{
    BT_I
    BT_L
    BT_J
    BT_Z
    BT_S
    BT_T
    BT_O
}
public class Block{

    int X = 0;
    int Y = 0;
    TBLOCK BlockType = TBLOCK.BLOCK;

    //Block은 TetrisScreen 클래스의 기능을 도움 받아 화면에 나타날 수 있음.

    TetrisScreen Screen = null; //새 객체를 만들면 다른 TetrisScreen과 화면이 공유되지 않기에 다른 방법을 써야함

    //Block NewBlock이 가리키고 있는 힙 영역의 new block에 존재하는 Screen(TetrisScreen Screen = null;)이
    //TetrisScreen NewSC이 가리키고 있는  new TetrisScreen(5,5);를 가리키는 상황

    //즉 TetrisScreen NewSC를 수정하나 TettisScreen Screen을 수정하나 같은 결과를 가지게 됨
    //하나의 화면에 다른 두가지의 명령을 동시에 출력 가능하게 해줌




    public Block(TetrisScreen _Screen){


        Screen = _Screen
    }

    private void Input(){

        switch (Console.Readkey().Key){

            case ConsoleKey.A:
            X -= 1;
            break;

            case ConsoleKey.D:
            X += 1;
            break;

            case ConsoleKey.s:
            break;

            default:
            break;
        }



    }


    public void Move(){

        if(true == Console.KeyAvailable){//내가 어떤 키든 눌렀을때만 

            Input();
        }

        Screen.SetBlock(Y, X, BlockType);
        
    }





}


public class Test{

   
}



class TetrisScreen{


    public void SetBlock(int _Y,  int _X, TBLOCK_Type){

        BlockList[_y][_x] = _Type;

    }





    List<List<TBLOCK>> MyList = new List<List<TBLOCK>>();



    public TetrisScreen(int _X, int _Y){//생성자 //현재 5,5가 입력됨.

    // 0,0 같은 경우가 들어오지 않게 방어코드 작성이 필요함.

        for (int y = 0; i < _Y; y++)
        {
            MyList.Add(new List<TBLOCK>());
            //matrix.Add(new List<int>() { 1, 2, 3 }); 다른 예시.
            //반복할 때마다 비어있는 List<int> 객체가 MyList에 추가된다.

            
            for (int x = 0; x < _X; x++)
            {
                MyList[y].Add(TBLOCK.VOID);
                //MyList의 y번째에 넣어주는 것임
                //y번째에 x번만큼 반복되서 입력됨
                //전체적으로 VOID를 넣어줌
                
            }
            
        }



        //벽을 설치해주는 코드

        for (int i = 0; i < List[0].Count; i++)
        {
            List[0][i] = TBLOCK.WALL;
            
        }

        for (int i = 0; i < List[List.Count - 1].Count; i++)
        {
            List[List.Count - 1][i] = TBLOCK.WALL;
            
        }

    }



    public void Render(){
        //for 반복문을 사용하여 MyList의 각 요소를 순회하면서 값을 출력한다.

        for (int y = 0; y < MyList.Count; y++)
        {
            for (int x = 0; x < MyList[y].Count; x++)
            {
                //Console.Write(List[y][x]);

                switch (List[y][x])
                {
                    case TBLOCK.WALL:
                    Console.Write("★");
                    break;

                    case TBLOCK.VOID:
                    Console.Write("□");
                    break; 

                    case TBLOCK.BLOCK:
                    Console.write("■");
                    break;
                    
                    default:
                    break;
                }
                
            }

            Console.WriteLine();
            
        }
    }

}







namespace Tetris{

    class Program{

        static void Main(String[] args){


            TetrisScreen NewSC = new TetrisScreen(5,5);


            //NewSC.SetBlock(3, 3, TBLOCK:WALL);


            while (true){

                for (int i = 0; i < 1000000; i++)
                {

                    int a = 0;
                    
                }
                
                Console.clear();

                NewSC.Render();
                NewBlock.Move();


            }
            

            


            Block NewBlock = new Block(NewSC);
            

            


            //Block의 생성자에서
            // public Block(TetrisScreen _Screen){


            // Screen = _Screen
            // }TetrisScreen 형태의 객체를 받아야만 Block이 실행되게 하므로 NewSC를 넣어줌








            // Test[] Arr = new Test[10];
            // //이 코드는 테스트를 10개 만든 것이 아닌
            // //테스트를 담을 수 있는 공간을 10개 만들 것이다.


            // //곧 바로 판을 그리는 방법.


            // //2차원 배열: int[][] Arr = new int[15][];
            // List<List<int>> MyList = new List<List<int>>();
            
            
            // string Str += "";

            // for (int i = 0; i < 10; i++)
            // {
            //     if(true){
            //         Str += "■";
            //     }
                
            // }

            // Console.WriteLine(Str);






            // //가장 먼저 해야할 일.
            // ///계속해서 블럭이 내려오므로 while문 작성

            // while (true){

            //     Console.Readkey();
            // }


            // //판을 그려넣고 덮어씌우는 방법.

            // for (int y = 0; y < 15; y++)
            // {
            //     for (int i = 0; i < 10; i++)
            //     {

            //         if (y == 0 || y == 14){

            //             Console.Write("★");

            //         }else
            //         {
            //             Console.Write(" ");
            //         }
                    
                    
            //     }

            //     Console.WriteLine("");
                
            // }



           

            // //닾아씌우기
            // Console.CursorLeft = 6;
            // Console.Cursortop = 6;
            // Console.Write("▣");
            
            // //이미 판을 그려놓고 위에 덮어 씌우는 방식임.




            


        }
    }



}

