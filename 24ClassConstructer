using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class FightUnit{

    protected int AT;

    public FightUnit(){
        int a = 0;
    }

}

class Player : FightUnit{

    //생성자라고 한다.
    //리턴값이 없다.
    //함수 이름이 클래스 이름이다.
    //생성자는 만들어 질때 한번 실행되어 주는 함수.



    //만약 아래의 Public Player() 생성자가 없다면
    // //눈에 보이지 않지만 만들지 않아도
    // //이 함수는 만들어짐

    // public Player(){

    //     int Number;

    // }


    public Player(){

        AT = 100;

        int a = 0;
    }



    
}


//생성자가 호출 = AT(지역변수)가 생성됬다

//Player 클래스를 바탕으로 객체화 하면 NewPlayer를 만들려고 할때 호출되어 주는 함수 > 리턴 값이 없다.
//문법적으로 무조건 자신의 클래스를 리턴하는 함수이다.

//접근 제한 지정자만이 있으며 private을 사용시 객체를 만들 수 조차 없게 한다.

//생성자: 만들어지는 순간 해야할 일이 있으면 여기서 해라. 라는 뜻.





namespace _24ClassConstructer{

    class Program{

        static void Main(String[] args){

            
            Player NewPlayer = new Player();
            //눈에 보이지 않으며 만들지 않아도 이미 만들어진 ... Player생성자로 인해
            //new Player의 Player을 사용가능한것임.
            




            


        }
    }



}

