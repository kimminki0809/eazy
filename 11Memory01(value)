using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class Player{
    int AT;
    int HP;

    public int Test(int _Dmg){
        _Dmg = 1000;

        return _Dmg;
         //return은 끝내겠다는 함수를 종료하겠다는 동시에 _Dmg값을 main함수에서 호출한 곳으로 던져주겠다는 뜻입니다.
         //int형을 호출한 곳으로 던져주어야 하기에 int리턴값 사용. //값형의 처리

    }
   
    }





namespace _09Operator{

    class Program{

        static void Main(String[] args){


            Player NewPlayer = new Player();
            
            //함수의 인자값
            int Value = 0;


            NewPlayer.Test(Value);



            value = NewPlayer.Test(value);//값형의 처리//영상 마지막부분
            //return은 끝내겠다는 함수를 종료하겠다는 동시에 _Dmg값을 main함수에서 호출한 곳으로 던져주겠다는 뜻입니다.
            //Test(value);가 함수를 호출한 부분이므로 리턴이 되어서 NewPlayer.Test(Value);는 1000이 된다.
            //대입연산자의 방식대로 오른쪽에서 왼쪽으로 코드를 읽으면 value값은 1000이 된다.




            Console.WriteLine(Value);//Value 값인 0이 들어갔는데 _Dmg를 1000으로 했다. 이러면 Value 값은 무엇이 나올까?


            //1. Main 함수에 대한 메모리가 스택에 할당된다. (int value =0; 라는 지역변수) //약 98번째에 할당되었다고 가정
            //2. NewPlayer.Test 함수에 대한 다른 메모리가 스택에 할당된다. > Main 함수 산하에 있다고 Main 안에 할당되지는 않음 // 74로 가정

            //3. 98바이트에 있는 0이라는 값을 74바이트에 있는 int_Dmg가 받는다
            //4. _Dmg가 1000으로 변한다
            //5. Test하는 함수가 끝나면 74바이트에 할당된 int_Dmg를 포함한 할당된 메모리가 4. 스택에서 없어진다.
            //6. Value의 값은 0
            //인자값은 곧 지역변수이다. 지역변수에서 벌어지는 일은 그 지역에서만 벌어진다. 고로 value의 값은 0이다.

        }
    }



}

