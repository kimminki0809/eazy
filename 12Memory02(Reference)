using System; //00 using은 다른 사람이 만들어둔 코드를 가져다 쓰겠다 라는 의미
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class Player{
    public int AT = 10;
    public int HP = 100;

    //함수의 추가 설명
    //인자값에 다른 클래스를 넣을 수도 있다.
    public void ATT(Monster _Monster){//클래스가 객체화 돤 것을 받았다.
        _Monster.HP -= AT;


    }
    }

class Monster{
    public int AT = 10;
    public int HP = 100;


    public void ATT(Player _Player){//클래스가 객체화 된 것을 받았다.
        _Player.HP -= AT;
        //내가 가리키고 있는 위치(_Player)에 있는 HP를 사용하겠다.
    }

   
    }



namespace _12{

    class Program{

        static void Main(String[] args){

            Monster NewMonster = new Monster(); //스택에 있는 메모리의 값은 60이됨
            Player NewPlayer = new Player(); //스택에 있는 메모리의 값은 50이됨

            //new의 역할은 메모리를 힙에 생기게 해주는 역할을 한다.

            NewMonster.ATT(NewPlayer);
            //클래스가 객체화 된 것들은 레퍼런스 형이라고 하는 자료형이 된다.
            //+ 일반적으로 사용하는 int bull 은 값 형이라는 자료형이다.
            //레퍼런스 형과 값 형은 메모리의 위치와 사용법이 다르다. 고로 다르게 동작한다. 



            //레퍼런스 형의 메모리 동작
            //1. 스택의 Main 함수에 Player NewPlayer, Monster NewMonster이 생긴다
            //2. 대입 연산자의 new Player과 new Monster는 3.힙이라는 곳에 할당된다. 
            //3. new Player /크기는 8바이트/ /값은 AT=10 HP=100/ /위치는 50으로 가정 monster은 60으로 가정/
            //4. 스택에 있던 Player NewPlayer, Monster NewMonster의 값은 힙에 있는 메모리의 위치인 50과 60으로 변한다.
            //레퍼런스는 힙에 생성된 메모리의 위치를 가리키는 값이 된다.

            //고로, 레퍼런스(클래스를 자료형으로 만듬)의 역할은 힙에 할당된 메모리를 가리키는 역할을 한다.


            //NewMonster.ATT(NewPlayer);의 해석
            //1. NewMonster.ATT는 Player _Player과 연결이 된다. (NewPlayer)로 인하여.
            //2. Player _Player은 Player NewPlayer의 값인 50을 그대로 받는다(new Player의 위치를 가리키는 값)
            //3. Player _Player 또한 50번지를 가리키는 reference 의 역할을 하게 된다.
            //4. 50번지인 힙의 값은 AT= 10, HP= 100이다.(new Player)
            //5. _Player.HP -= AT;에 따라 100 - 10은 90이 된다.
            //6. 함수가 끝나 레퍼런스형 지역변수가 메모리에서 제거된다.
            //7. Player NewPlayer의 메모리의 값은 아직도 50이기에 50번째의 힙을 가르킨다.(레퍼런스형)
            //8. 값은 90이 출력 된다.


            //기본 자료를 선언만 한다면 그 형식은 값 형.
            //자기가 만든 new class명을 타 클래스에서 받으면 그 형식은 레퍼런스 형.



            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////




            //코드: 상수, 클래스 선언 그 자체. 함수의 내용 그 자체. 수정이 불가능한 것들.
            //데이터: 정적맴버변수
            //힙: new 클래스명 () 형식으로 만들어진 클래스 객체들의 본체가 여기에 속함.
            //스택: 함수의 박스, 함수의 실행 메모리 영역. 그 박스 안에 들어있는 지역변수.






            


        }
    }



}

